package servicemanager

import (
	"context"
	"fmt"
	"os"
	"text/template"
	"time"

	"gopkg.in/yaml.v3"
)

const defaultProvisionedTemplate = `
# --- Provisioned Resources ---
# This file was generated by the ServiceManager. Do not edit manually.
# Timestamp: {{.Timestamp}}

ProvisionedTopics:
{{- range .Topics}}
  - Name: {{.Name}}
{{- end}}

ProvisionedSubscriptions:
{{- range .Subscriptions}}
  - Name: {{.Name}}
    Topic: {{.Topic}}
{{- end}}

ProvisionedGCSBuckets:
{{- range .GCSBuckets}}
  - Name: {{.Name}}
{{- end}}

ProvisionedBigQueryDatasets:
{{- range .BigQueryDatasets}}
  - Name: {{.Name}}
{{- end}}

ProvisionedBigQueryTables:
{{- range .BigQueryTables}}
  - Name: {{.Name}}
    Dataset: {{.Dataset}}
{{- end}}
`

// YAMLArchitectureIO implements the ArchitectureIO interface for local YAML files.
type YAMLArchitectureIO struct {
	template       *template.Template
	inputFilePath  string
	outputFilePath string
}

// NewYAMLArchitectureIO creates a new loader that reads and writes local YAML files.
func NewYAMLArchitectureIO() (*YAMLArchitectureIO, error) {
	tmpl, err := template.New("provisioned").Parse(defaultProvisionedTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse internal provisioned resources template: %w", err)
	}
	return &YAMLArchitectureIO{
		template: tmpl,
	}, nil
}

// LoadArchitecture reads the full architecture from a local file path.
func (y *YAMLArchitectureIO) LoadArchitecture(ctx context.Context) (*MicroserviceArchitecture, error) {
	data, err := os.ReadFile(y.inputFilePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read architecture file '%s': %w", y.inputFilePath, err)
	}

	var arch MicroserviceArchitecture
	if err := yaml.Unmarshal(data, &arch); err != nil {
		return nil, fmt.Errorf("failed to unmarshal architecture YAML from '%s': %w", y.inputFilePath, err)
	}
	return &arch, nil
}

// LoadResourceGroup reads a single resource group from a local file path.
func (y *YAMLArchitectureIO) LoadResourceGroup(ctx context.Context, filePath string) (*ResourceGroup, error) {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read resource group file '%s': %w", filePath, err)
	}

	var group ResourceGroup
	if err := yaml.Unmarshal(data, &group); err != nil {
		return nil, fmt.Errorf("failed to unmarshal resource group YAML from '%s': %w", filePath, err)
	}
	return &group, nil
}

// WriteProvisionedResources writes the provisioned state to a local file path.
func (y *YAMLArchitectureIO) WriteProvisionedResources(ctx context.Context, resources *ProvisionedResources) error {
	file, err := os.Create(y.outputFilePath)
	if err != nil {
		return fmt.Errorf("failed to create output file at '%s': %w", y.outputFilePath, err)
	}
	defer file.Close()

	// We can enrich the data before writing
	type templateData struct {
		*ProvisionedResources
		Timestamp string
	}

	data := templateData{
		ProvisionedResources: resources,
		Timestamp:            time.Now().UTC().Format(time.RFC3339),
	}

	if err := y.template.Execute(file, data); err != nil {
		return fmt.Errorf("failed to execute template and write to '%s': %w", y.outputFilePath, err)
	}
	return nil
}
