package servicemanager

import (
	"fmt"
	"os"
	"text/template"

	"gopkg.in/yaml.v3"
)

// DefaultProvisionedTemplate is a simple text template for writing provisioned resources.
const DefaultProvisionedTemplate = `
# --- Provisioned Resources ---
# This file was generated by the ServiceManager. Do not edit manually.

ProvisionedTopics:
{{- range .Topics}}
  - Name: {{.Name}}
    ProducerService: {{.ProducerService}}
{{- end}}

ProvisionedSubscriptions:
{{- range .Subscriptions}}
  - Name: {{.Name}}
    Topic: {{.Topic}}
{{- end}}

ProvisionedGCSBuckets:
{{- range .GCSBuckets}}
  - Name: {{.Name}}
{{- end}}

ProvisionedBigQueryDatasets:
{{- range .BigQueryDatasets}}
  - Name: {{.Name}}
{{- end}}

ProvisionedBigQueryTables:
{{- range .BigQueryTables}}
  - Name: {{.Name}}
    Dataset: {{.Dataset}}
{{- end}}
`

// YamlIO handles reading and writing YAML configuration files.
type YamlIO struct{}

// NewYamlIO creates a new YAML file handler.
func NewYamlIO() *YamlIO {
	return &YamlIO{}
}

// ReadArchitecture reads a MicroserviceArchitecture from a YAML file.
func (y *YamlIO) ReadArchitecture(filePath string) (*MicroserviceArchitecture, error) {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read architecture file '%s': %w", filePath, err)
	}

	var arch MicroserviceArchitecture
	if err := yaml.Unmarshal(data, &arch); err != nil {
		return nil, fmt.Errorf("failed to unmarshal architecture YAML from '%s': %w", filePath, err)
	}

	return &arch, nil
}

// ReadResourceGroup reads a single ResourceGroup from a YAML file.
func (y *YamlIO) ReadResourceGroup(filePath string) (*ResourceGroup, error) {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read resource group file '%s': %w", filePath, err)
	}

	var group ResourceGroup
	if err := yaml.Unmarshal(data, &group); err != nil {
		return nil, fmt.Errorf("failed to unmarshal resource group YAML from '%s': %w", filePath, err)
	}

	return &group, nil
}

// WriteProvisionedResources writes the details of provisioned resources to a file using a template.
// This implementation satisfies the ProvisionedResourceWriter interface.
func (y *YamlIO) WriteProvisionedResources(filePath string, resources *ProvisionedResources) error {
	tmpl, err := template.New("provisioned").Parse(DefaultProvisionedTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse internal provisioned resources template: %w", err)
	}

	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("failed to create output file at '%s': %w", filePath, err)
	}
	defer file.Close()

	if err := tmpl.Execute(file, resources); err != nil {
		return fmt.Errorf("failed to execute template and write to '%s': %w", filePath, err)
	}

	return nil
}
