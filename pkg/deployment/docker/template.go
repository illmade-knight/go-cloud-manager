// deployer/docker/template.go
package docker

const (
	// goDockerfileTemplate is the template for a standard multi-stage Go Dockerfile.
	// It uses placeholders like {{.ServiceName}} which will be filled in by the orchestrator.
	goDockerfileTemplate = `# Dockerfile for the {{.ServiceName}} service (auto-generated by orchestrator)

# --- Build Stage ---
# Use a specific Go version for reproducible builds.
FROM golang:1.22-alpine AS builder

# Set the working directory inside the container.
WORKDIR /app

# Copy go.mod and go.sum to leverage Docker's layer caching.
# This step is only re-run if the dependencies change.
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the application source code.
COPY . .

# Build the Go application.
# CGO_ENABLED=0 creates a static binary, which is ideal for Alpine Linux.
# -v for verbose output, -o specifies the output file.
RUN CGO_ENABLED=0 GOOS=linux go build -v -o /app/{{.ServiceName}} ./{{.MainPackagePath}}

# --- Final Stage ---
# Use a minimal, secure base image for the final container.
FROM alpine:latest

# It's good practice to run as a non-root user for security.
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
USER appuser

WORKDIR /home/appuser/

# Copy only the compiled executable from the builder stage.
COPY --from=builder /app/{{.ServiceName}} .

# Expose the port the application will listen on. Cloud Run's default is 8080.
EXPOSE 8080

# The command to run when the container starts.
CMD ["./{{.ServiceName}}"]
`
)
